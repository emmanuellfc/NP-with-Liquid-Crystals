[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-smi'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-debugdump'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-persistenced'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-control'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-server'
[0mHOOMD-blue 2.3.5 CUDA (8.0) DOUBLE HPMC_MIXED TBB SSE SSE2 
Compiled: 10/08/18
Copyright 2009-2018 The Regents of the University of Michigan.
-----
You are using HOOMD-blue. Please cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]            Tesla K20m  13 SM_3.5 @ 0.706 GHz, 4743 MiB DRAM
Equilibrium_72.py:047  |  system = hoomd.init.read_gsd(ramp_file,frame = -1)
notice(2): Group "all" created containing 1004 particles
Equilibrium_72.py:051  |  rigid = hoomd.md.constrain.rigid();
notice(2): constrain.rigid(): Creating 1000 rigid bodies (adding 8000 particles)
Equilibrium_72.py:063  |  nl = hoomd.md.nlist.tree(r_buff = 0.5, check_period = 1); #-----Implementation of fast neighborhood list.
-----
You are using tree neighbor lists. Please cite the following:
* M P Howard, J A Anderson, A Nikoubashman, S C Glotzer, and A Z
  Panagiotopoulos. "Efficient neighbor list calculation for molecular simulation
  of colloidal systems using graphics processing units", Computer Physics
  Communications 203 (2016) 45--52
-----
Equilibrium_72.py:065  |  lj = hoomd.md.pair.lj(r_cut = 3.5, nlist=nl)
Equilibrium_72.py:066  |  lj.set_params(mode='shift')
Equilibrium_72.py:070  |  lj.pair_coeff.set('NP','NP', epsilon = 1.0, sigma = 5.0);
Equilibrium_72.py:071  |  lj.pair_coeff.set('M' ,'M' , epsilon = 1.0, sigma = 1.0);
Equilibrium_72.py:072  |  lj.pair_coeff.set('A' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_72.py:073  |  lj.pair_coeff.set('M' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_72.py:074  |  lj.pair_coeff.set('NP','M' , epsilon = 1.0, sigma = 3.0);
Equilibrium_72.py:075  |  lj.pair_coeff.set('NP','A' , epsilon = 1.0, sigma = 3.0);
Equilibrium_72.py:079  |  hoomd.md.integrate.mode_standard(dt = 0.005);
Equilibrium_72.py:083  |  nanoparticles = hoomd.group.type(name = 'Nano_Particles', type = 'NP');
notice(2): Group "Nano_Particles" created containing 4 particles
Equilibrium_72.py:084  |  mesogens = hoomd.group.rigid_center();
notice(2): Group "rigid_center" created containing 1000 particles
notice(2): Group "NP_Mes" created containing 1004 particles
Equilibrium_72.py:089  |  npt = hoomd.md.integrate.npt(group = mesogens, kT = temp, tau = 18.5, tauP = 18.5, P = pressure);
Equilibrium_72.py:096  |  log = hoomd.analyze.log(filename = log_file,
                         quantities = ['num_particles',
                                     'ndof',
                                     'translational_ndof',
                                     'rotational_ndof',
                                     'potential_energy',
                                     'kinetic_energy',
                                     'translational_kinetic_energy',
                                     'rotational_kinetic_energy',
                                     'temperature',
                                     'pressure',
                                      'volume'],
                         period = 1e3,
                         overwrite = True);
Equilibrium_72.py:112  |                 group = hoomd.group.all(),
Equilibrium_72.py:110  |  gsd = hoomd.dump.gsd(gsd_file,
               period = 1e3,
               group = hoomd.group.all(),
               overwrite=True); 
Equilibrium_72.py:114  |  meso_gsd = hoomd.dump.gsd(meso_gsd_file,
               period = 1e3,
               group = mesogens,
               overwrite=True); 
Equilibrium_72.py:125  |  hoomd.run(steps)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 0 exclusions             : 9004
notice(2): Neighbors included by diameter          : no
notice(2): Neighbors excluded when in the same body: yes
** starting run **
Time 00:00:10 | Step 739669 / 837000 | TPS 266.781 | ETA 00:06:04
Time 00:00:20 | Step 742597 / 837000 | TPS 292.778 | ETA 00:05:22
Time 00:00:30 | Step 745603 / 837000 | TPS 300.347 | ETA 00:05:04
Time 00:00:40 | Step 748655 / 837000 | TPS 305.04 | ETA 00:04:49
Time 00:00:50 | Step 753986 / 837000 | TPS 533.089 | ETA 00:02:35
Time 00:01:00 | Step 760403 / 837000 | TPS 641.677 | ETA 00:01:59
Time 00:01:10 | Step 766801 / 837000 | TPS 620.346 | ETA 00:01:53
Time 00:01:20 | Step 773219 / 837000 | TPS 641.777 | ETA 00:01:39
Time 00:01:30 | Step 779653 / 837000 | TPS 643.375 | ETA 00:01:29
Time 00:01:40 | Step 786001 / 837000 | TPS 616.481 | ETA 00:01:22
Time 00:01:50 | Step 792436 / 837000 | TPS 643.477 | ETA 00:01:09
Time 00:02:00 | Step 798870 / 837000 | TPS 643.394 | ETA 00:00:59
Time 00:02:11 | Step 805201 / 837000 | TPS 615.4 | ETA 00:00:51
Time 00:02:21 | Step 811634 / 837000 | TPS 643.276 | ETA 00:00:39
Time 00:02:31 | Step 818052 / 837000 | TPS 641.78 | ETA 00:00:29
Time 00:02:41 | Step 824401 / 837000 | TPS 617.174 | ETA 00:00:20
Time 00:02:51 | Step 830837 / 837000 | TPS 643.579 | ETA 00:00:09
Time 00:03:00 | Step 837000 / 837000 | TPS 645.873 | ETA 00:00:00
Average TPS: 553.252
---------
-- Neighborlist stats:
4241 normal updates / 334 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 0 / n_neigh_avg: 0
shortest rebuild period: 1
** run complete **
