[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-smi'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-debugdump'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-persistenced'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-control'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-server'
[0mHOOMD-blue 2.3.5 CUDA (8.0) DOUBLE HPMC_MIXED TBB SSE SSE2 
Compiled: 10/08/18
Copyright 2009-2018 The Regents of the University of Michigan.
-----
You are using HOOMD-blue. Please cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]            Tesla K20m  13 SM_3.5 @ 0.706 GHz, 4743 MiB DRAM
Equilibrium_70.py:047  |  system = hoomd.init.read_gsd(ramp_file,frame = -1)
notice(2): Group "all" created containing 1004 particles
Equilibrium_70.py:051  |  rigid = hoomd.md.constrain.rigid();
notice(2): constrain.rigid(): Creating 1000 rigid bodies (adding 8000 particles)
Equilibrium_70.py:063  |  nl = hoomd.md.nlist.tree(r_buff = 0.5, check_period = 1); #-----Implementation of fast neighborhood list.
-----
You are using tree neighbor lists. Please cite the following:
* M P Howard, J A Anderson, A Nikoubashman, S C Glotzer, and A Z
  Panagiotopoulos. "Efficient neighbor list calculation for molecular simulation
  of colloidal systems using graphics processing units", Computer Physics
  Communications 203 (2016) 45--52
-----
Equilibrium_70.py:065  |  lj = hoomd.md.pair.lj(r_cut = 3.5, nlist=nl)
Equilibrium_70.py:066  |  lj.set_params(mode='shift')
Equilibrium_70.py:070  |  lj.pair_coeff.set('NP','NP', epsilon = 1.0, sigma = 5.0);
Equilibrium_70.py:071  |  lj.pair_coeff.set('M' ,'M' , epsilon = 1.0, sigma = 1.0);
Equilibrium_70.py:072  |  lj.pair_coeff.set('A' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_70.py:073  |  lj.pair_coeff.set('M' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_70.py:074  |  lj.pair_coeff.set('NP','M' , epsilon = 1.0, sigma = 3.0);
Equilibrium_70.py:075  |  lj.pair_coeff.set('NP','A' , epsilon = 1.0, sigma = 3.0);
Equilibrium_70.py:079  |  hoomd.md.integrate.mode_standard(dt = 0.005);
Equilibrium_70.py:083  |  nanoparticles = hoomd.group.type(name = 'Nano_Particles', type = 'NP');
notice(2): Group "Nano_Particles" created containing 4 particles
Equilibrium_70.py:084  |  mesogens = hoomd.group.rigid_center();
notice(2): Group "rigid_center" created containing 1000 particles
notice(2): Group "NP_Mes" created containing 1004 particles
Equilibrium_70.py:089  |  npt = hoomd.md.integrate.npt(group = mesogens, kT = temp, tau = 16.0, tauP = 16.0, P = pressure);
Equilibrium_70.py:096  |  log = hoomd.analyze.log(filename = log_file,
                         quantities = ['num_particles',
                                     'ndof',
                                     'translational_ndof',
                                     'rotational_ndof',
                                     'potential_energy',
                                     'kinetic_energy',
                                     'translational_kinetic_energy',
                                     'rotational_kinetic_energy',
                                     'temperature',
                                     'pressure',
                                      'volume'],
                         period = 1e3,
                         overwrite = True);
Equilibrium_70.py:112  |                 group = hoomd.group.all(),
Equilibrium_70.py:110  |  gsd = hoomd.dump.gsd(gsd_file,
               period = 1e3,
               group = hoomd.group.all(),
               overwrite=True); 
Equilibrium_70.py:114  |  meso_gsd = hoomd.dump.gsd(meso_gsd_file,
               period = 1e3,
               group = mesogens,
               overwrite=True); 
Equilibrium_70.py:125  |  hoomd.run(steps)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 0 exclusions             : 9004
notice(2): Neighbors included by diameter          : no
notice(2): Neighbors excluded when in the same body: yes
** starting run **
Time 00:00:10 | Step 690591 / 788000 | TPS 258.896 | ETA 00:06:16
Time 00:00:20 | Step 693461 / 788000 | TPS 286.751 | ETA 00:05:29
Time 00:00:30 | Step 696343 / 788000 | TPS 288.126 | ETA 00:05:18
Time 00:00:40 | Step 699278 / 788000 | TPS 293.301 | ETA 00:05:02
Time 00:00:50 | Step 702901 / 788000 | TPS 359.708 | ETA 00:03:56
Time 00:01:00 | Step 709501 / 788000 | TPS 651.584 | ETA 00:02:00
Time 00:01:10 | Step 716101 / 788000 | TPS 651.467 | ETA 00:01:50
Time 00:01:20 | Step 722701 / 788000 | TPS 652.133 | ETA 00:01:40
Time 00:01:30 | Step 729301 / 788000 | TPS 651.518 | ETA 00:01:30
Time 00:01:40 | Step 735901 / 788000 | TPS 652.201 | ETA 00:01:19
Time 00:01:51 | Step 742501 / 788000 | TPS 651.63 | ETA 00:01:09
Time 00:02:01 | Step 749101 / 788000 | TPS 651.693 | ETA 00:00:59
Time 00:02:11 | Step 755701 / 788000 | TPS 652.226 | ETA 00:00:49
Time 00:02:21 | Step 762301 / 788000 | TPS 651.703 | ETA 00:00:39
Time 00:02:31 | Step 768901 / 788000 | TPS 652.195 | ETA 00:00:29
Time 00:02:41 | Step 775501 / 788000 | TPS 651.642 | ETA 00:00:19
Time 00:02:51 | Step 782101 / 788000 | TPS 651.667 | ETA 00:00:09
Time 00:03:00 | Step 788000 / 788000 | TPS 667.903 | ETA 00:00:00
Average TPS: 554.204
---------
-- Neighborlist stats:
4572 normal updates / 334 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 2 / n_neigh_avg: 0.000444247
shortest rebuild period: 1
** run complete **
[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-smi'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-debugdump'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-persistenced'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-control'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-server'
[0mHOOMD-blue 2.3.5 CUDA (8.0) DOUBLE HPMC_MIXED TBB SSE SSE2 
Compiled: 10/08/18
Copyright 2009-2018 The Regents of the University of Michigan.
-----
You are using HOOMD-blue. Please cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]            Tesla K20m  13 SM_3.5 @ 0.706 GHz, 4743 MiB DRAM
Equilibrium_72.py:047  |  system = hoomd.init.read_gsd(ramp_file,frame = -1)
notice(2): Group "all" created containing 1004 particles
Equilibrium_72.py:051  |  rigid = hoomd.md.constrain.rigid();
notice(2): constrain.rigid(): Creating 1000 rigid bodies (adding 8000 particles)
Equilibrium_72.py:063  |  nl = hoomd.md.nlist.tree(r_buff = 0.5, check_period = 1); #-----Implementation of fast neighborhood list.
-----
You are using tree neighbor lists. Please cite the following:
* M P Howard, J A Anderson, A Nikoubashman, S C Glotzer, and A Z
  Panagiotopoulos. "Efficient neighbor list calculation for molecular simulation
  of colloidal systems using graphics processing units", Computer Physics
  Communications 203 (2016) 45--52
-----
Equilibrium_72.py:065  |  lj = hoomd.md.pair.lj(r_cut = 3.5, nlist=nl)
Equilibrium_72.py:066  |  lj.set_params(mode='shift')
Equilibrium_72.py:070  |  lj.pair_coeff.set('NP','NP', epsilon = 1.0, sigma = 5.0);
Equilibrium_72.py:071  |  lj.pair_coeff.set('M' ,'M' , epsilon = 1.0, sigma = 1.0);
Equilibrium_72.py:072  |  lj.pair_coeff.set('A' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_72.py:073  |  lj.pair_coeff.set('M' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_72.py:074  |  lj.pair_coeff.set('NP','M' , epsilon = 1.0, sigma = 3.0);
Equilibrium_72.py:075  |  lj.pair_coeff.set('NP','A' , epsilon = 1.0, sigma = 3.0);
Equilibrium_72.py:079  |  hoomd.md.integrate.mode_standard(dt = 0.005);
Equilibrium_72.py:083  |  nanoparticles = hoomd.group.type(name = 'Nano_Particles', type = 'NP');
notice(2): Group "Nano_Particles" created containing 4 particles
Equilibrium_72.py:084  |  mesogens = hoomd.group.rigid_center();
notice(2): Group "rigid_center" created containing 1000 particles
notice(2): Group "NP_Mes" created containing 1004 particles
Equilibrium_72.py:089  |  npt = hoomd.md.integrate.npt(group = mesogens, kT = temp, tau = 17.0, tauP = 17.0, P = pressure);
Equilibrium_72.py:096  |  log = hoomd.analyze.log(filename = log_file,
                         quantities = ['num_particles',
                                     'ndof',
                                     'translational_ndof',
                                     'rotational_ndof',
                                     'potential_energy',
                                     'kinetic_energy',
                                     'translational_kinetic_energy',
                                     'rotational_kinetic_energy',
                                     'temperature',
                                     'pressure',
                                      'volume'],
                         period = 1e3,
                         overwrite = True);
Equilibrium_72.py:112  |                 group = hoomd.group.all(),
Equilibrium_72.py:110  |  gsd = hoomd.dump.gsd(gsd_file,
               period = 1e3,
               group = hoomd.group.all(),
               overwrite=True); 
Equilibrium_72.py:114  |  meso_gsd = hoomd.dump.gsd(meso_gsd_file,
               period = 1e3,
               group = mesogens,
               overwrite=True); 
Equilibrium_72.py:125  |  hoomd.run(steps)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 0 exclusions             : 9004
notice(2): Neighbors included by diameter          : no
notice(2): Neighbors excluded when in the same body: yes
** starting run **
Time 00:00:10 | Step 739619 / 837000 | TPS 261.883 | ETA 00:06:11
Time 00:00:20 | Step 742561 / 837000 | TPS 294.058 | ETA 00:05:21
Time 00:00:30 | Step 745500 / 837000 | TPS 293.726 | ETA 00:05:11
Time 00:00:40 | Step 748464 / 837000 | TPS 296.385 | ETA 00:04:58
Time 00:00:50 | Step 751490 / 837000 | TPS 302.351 | ETA 00:04:42
Time 00:01:00 | Step 754505 / 837000 | TPS 301.5 | ETA 00:04:33
Time 00:01:10 | Step 757548 / 837000 | TPS 304.291 | ETA 00:04:21
Time 00:01:20 | Step 760570 / 837000 | TPS 302.125 | ETA 00:04:12
Time 00:01:30 | Step 766201 / 837000 | TPS 562.725 | ETA 00:02:05
Time 00:01:40 | Step 772637 / 837000 | TPS 643.59 | ETA 00:01:40
Time 00:01:50 | Step 779054 / 837000 | TPS 641.684 | ETA 00:01:30
Time 00:02:00 | Step 785401 / 837000 | TPS 616.965 | ETA 00:01:23
Time 00:02:10 | Step 791837 / 837000 | TPS 643.573 | ETA 00:01:10
Time 00:02:20 | Step 798260 / 837000 | TPS 642.281 | ETA 00:01:00
Time 00:02:30 | Step 804601 / 837000 | TPS 616.711 | ETA 00:00:52
Time 00:02:40 | Step 811021 / 837000 | TPS 641.972 | ETA 00:00:40
Time 00:02:50 | Step 817457 / 837000 | TPS 643.589 | ETA 00:00:30
Time 00:03:01 | Step 823801 / 837000 | TPS 616.909 | ETA 00:00:21
Time 00:03:11 | Step 830221 / 837000 | TPS 641.974 | ETA 00:00:10
Time 00:03:21 | Step 836658 / 837000 | TPS 643.698 | ETA 00:00:00
Time 00:03:21 | Step 837000 / 837000 | TPS 696.677 | ETA 00:00:00
Average TPS: 496.584
---------
-- Neighborlist stats:
8203 normal updates / 334 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 2 / n_neigh_avg: 0.000666371
shortest rebuild period: 1
** run complete **
[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-smi'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-debugdump'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-persistenced'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-control'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-server'
[0m**ERROR**: nlist.tree(): Particle 773 is out of bounds (x: -215.652, y: -19.7368, z: -94.4003, fx: -7.37951, fy: -0.221147, fz:-2.94921)
HOOMD-blue 2.3.5 CUDA (8.0) DOUBLE HPMC_MIXED TBB SSE SSE2 
Compiled: 10/08/18
Copyright 2009-2018 The Regents of the University of Michigan.
-----
You are using HOOMD-blue. Please cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]            Tesla K20m  13 SM_3.5 @ 0.706 GHz, 4743 MiB DRAM
Equilibrium_74.py:047  |  system = hoomd.init.read_gsd(ramp_file,frame = -1)
notice(2): Group "all" created containing 1004 particles
Equilibrium_74.py:051  |  rigid = hoomd.md.constrain.rigid();
notice(2): constrain.rigid(): Creating 1000 rigid bodies (adding 8000 particles)
Equilibrium_74.py:063  |  nl = hoomd.md.nlist.tree(r_buff = 0.5, check_period = 1); #-----Implementation of fast neighborhood list.
-----
You are using tree neighbor lists. Please cite the following:
* M P Howard, J A Anderson, A Nikoubashman, S C Glotzer, and A Z
  Panagiotopoulos. "Efficient neighbor list calculation for molecular simulation
  of colloidal systems using graphics processing units", Computer Physics
  Communications 203 (2016) 45--52
-----
Equilibrium_74.py:065  |  lj = hoomd.md.pair.lj(r_cut = 3.5, nlist=nl)
Equilibrium_74.py:066  |  lj.set_params(mode='shift')
Equilibrium_74.py:070  |  lj.pair_coeff.set('NP','NP', epsilon = 1.0, sigma = 5.0);
Equilibrium_74.py:071  |  lj.pair_coeff.set('M' ,'M' , epsilon = 1.0, sigma = 1.0);
Equilibrium_74.py:072  |  lj.pair_coeff.set('A' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_74.py:073  |  lj.pair_coeff.set('M' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_74.py:074  |  lj.pair_coeff.set('NP','M' , epsilon = 1.0, sigma = 3.0);
Equilibrium_74.py:075  |  lj.pair_coeff.set('NP','A' , epsilon = 1.0, sigma = 3.0);
Equilibrium_74.py:079  |  hoomd.md.integrate.mode_standard(dt = 0.005);
Equilibrium_74.py:083  |  nanoparticles = hoomd.group.type(name = 'Nano_Particles', type = 'NP');
notice(2): Group "Nano_Particles" created containing 4 particles
Equilibrium_74.py:084  |  mesogens = hoomd.group.rigid_center();
notice(2): Group "rigid_center" created containing 1000 particles
notice(2): Group "NP_Mes" created containing 1004 particles
Equilibrium_74.py:089  |  npt = hoomd.md.integrate.npt(group = mesogens, kT = temp, tau = 17.0, tauP = 17.0, P = pressure);
Equilibrium_74.py:096  |  log = hoomd.analyze.log(filename = log_file,
                         quantities = ['num_particles',
                                     'ndof',
                                     'translational_ndof',
                                     'rotational_ndof',
                                     'potential_energy',
                                     'kinetic_energy',
                                     'translational_kinetic_energy',
                                     'rotational_kinetic_energy',
                                     'temperature',
                                     'pressure',
                                      'volume'],
                         period = 1e3,
                         overwrite = True);
Equilibrium_74.py:112  |                 group = hoomd.group.all(),
Equilibrium_74.py:110  |  gsd = hoomd.dump.gsd(gsd_file,
               period = 1e3,
               group = hoomd.group.all(),
               overwrite=True); 
Equilibrium_74.py:114  |  meso_gsd = hoomd.dump.gsd(meso_gsd_file,
               period = 1e3,
               group = mesogens,
               overwrite=True); 
Equilibrium_74.py:125  |  hoomd.run(steps)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 0 exclusions             : 9004
notice(2): Neighbors included by diameter          : no
notice(2): Neighbors excluded when in the same body: yes
** starting run **
Time 00:00:10 | Step 782917 / 880000 | TPS 291.685 | ETA 00:05:32
Time 00:00:20 | Step 786053 / 880000 | TPS 313.509 | ETA 00:04:59
Time 00:00:30 | Step 789271 / 880000 | TPS 321.782 | ETA 00:04:41
Time 00:00:40 | Step 792464 / 880000 | TPS 319.28 | ETA 00:04:34
Traceback (most recent call last):
  File "Equilibrium_74.py", line 125, in <module>
    hoomd.run(steps)
  File "/usr/local/lib/python3.5/dist-packages/hoomd/__init__.py", line 194, in run
    context.current.system.run(int(tsteps), callback_period, callback, limit_hours, int(limit_multiple));
RuntimeError: Error updating neighborlist
[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-smi'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-debugdump'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-persistenced'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-control'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-server'
[0mHOOMD-blue 2.3.5 CUDA (8.0) DOUBLE HPMC_MIXED TBB SSE SSE2 
Compiled: 10/08/18
Copyright 2009-2018 The Regents of the University of Michigan.
-----
You are using HOOMD-blue. Please cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]            Tesla K20m  13 SM_3.5 @ 0.706 GHz, 4743 MiB DRAM
Equilibrium_76.py:047  |  system = hoomd.init.read_gsd(ramp_file,frame = -1)
notice(2): Group "all" created containing 1004 particles
Equilibrium_76.py:051  |  rigid = hoomd.md.constrain.rigid();
notice(2): constrain.rigid(): Creating 1000 rigid bodies (adding 8000 particles)
Equilibrium_76.py:063  |  nl = hoomd.md.nlist.tree(r_buff = 0.5, check_period = 1); #-----Implementation of fast neighborhood list.
-----
You are using tree neighbor lists. Please cite the following:
* M P Howard, J A Anderson, A Nikoubashman, S C Glotzer, and A Z
  Panagiotopoulos. "Efficient neighbor list calculation for molecular simulation
  of colloidal systems using graphics processing units", Computer Physics
  Communications 203 (2016) 45--52
-----
Equilibrium_76.py:065  |  lj = hoomd.md.pair.lj(r_cut = 3.5, nlist=nl)
Equilibrium_76.py:066  |  lj.set_params(mode='shift')
Equilibrium_76.py:070  |  lj.pair_coeff.set('NP','NP', epsilon = 1.0, sigma = 5.0);
Equilibrium_76.py:071  |  lj.pair_coeff.set('M' ,'M' , epsilon = 1.0, sigma = 1.0);
Equilibrium_76.py:072  |  lj.pair_coeff.set('A' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_76.py:073  |  lj.pair_coeff.set('M' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_76.py:074  |  lj.pair_coeff.set('NP','M' , epsilon = 1.0, sigma = 3.0);
Equilibrium_76.py:075  |  lj.pair_coeff.set('NP','A' , epsilon = 1.0, sigma = 3.0);
Equilibrium_76.py:079  |  hoomd.md.integrate.mode_standard(dt = 0.005);
Equilibrium_76.py:083  |  nanoparticles = hoomd.group.type(name = 'Nano_Particles', type = 'NP');
notice(2): Group "Nano_Particles" created containing 4 particles
Equilibrium_76.py:084  |  mesogens = hoomd.group.rigid_center();
notice(2): Group "rigid_center" created containing 1000 particles
notice(2): Group "NP_Mes" created containing 1004 particles
Equilibrium_76.py:089  |  npt = hoomd.md.integrate.npt(group = mesogens, kT = temp, tau = 17.0, tauP = 17.0, P = pressure);
Equilibrium_76.py:096  |  log = hoomd.analyze.log(filename = log_file,
                         quantities = ['num_particles',
                                     'ndof',
                                     'translational_ndof',
                                     'rotational_ndof',
                                     'potential_energy',
                                     'kinetic_energy',
                                     'translational_kinetic_energy',
                                     'rotational_kinetic_energy',
                                     'temperature',
                                     'pressure',
                                      'volume'],
                         period = 1e3,
                         overwrite = True);
Equilibrium_76.py:112  |                 group = hoomd.group.all(),
Equilibrium_76.py:110  |  gsd = hoomd.dump.gsd(gsd_file,
               period = 1e3,
               group = hoomd.group.all(),
               overwrite=True); 
Equilibrium_76.py:114  |  meso_gsd = hoomd.dump.gsd(meso_gsd_file,
               period = 1e3,
               group = mesogens,
               overwrite=True); 
Equilibrium_76.py:125  |  hoomd.run(steps)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 0 exclusions             : 9004
notice(2): Neighbors included by diameter          : no
notice(2): Neighbors excluded when in the same body: yes
** starting run **
Time 00:00:10 | Step 831902 / 929000 | TPS 290.182 | ETA 00:05:34
Time 00:00:20 | Step 837601 / 929000 | TPS 564.396 | ETA 00:02:41
Time 00:00:30 | Step 844201 / 929000 | TPS 648.53 | ETA 00:02:10
Time 00:00:40 | Step 850801 / 929000 | TPS 648.935 | ETA 00:02:00
Time 00:00:50 | Step 857401 / 929000 | TPS 648.388 | ETA 00:01:50
Time 00:01:00 | Step 864001 / 929000 | TPS 648.647 | ETA 00:01:40
Time 00:01:11 | Step 870601 / 929000 | TPS 649.049 | ETA 00:01:29
Time 00:01:21 | Step 877201 / 929000 | TPS 648.72 | ETA 00:01:19
Time 00:01:31 | Step 883801 / 929000 | TPS 649.132 | ETA 00:01:09
Time 00:01:41 | Step 890401 / 929000 | TPS 648.504 | ETA 00:00:59
Time 00:01:51 | Step 897001 / 929000 | TPS 648.403 | ETA 00:00:49
Time 00:02:02 | Step 903601 / 929000 | TPS 649.104 | ETA 00:00:39
Time 00:02:12 | Step 910201 / 929000 | TPS 648.416 | ETA 00:00:28
Time 00:02:22 | Step 916801 / 929000 | TPS 648.974 | ETA 00:00:18
Time 00:02:32 | Step 923401 / 929000 | TPS 648.529 | ETA 00:00:08
Time 00:02:40 | Step 929000 / 929000 | TPS 665.129 | ETA 00:00:00
Average TPS: 621.979
---------
-- Neighborlist stats:
1207 normal updates / 334 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 2 / n_neigh_avg: 0.000444247
shortest rebuild period: 1
** run complete **
[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-smi'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-debugdump'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-persistenced'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-control'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-server'
[0mHOOMD-blue 2.3.5 CUDA (8.0) DOUBLE HPMC_MIXED TBB SSE SSE2 
Compiled: 10/08/18
Copyright 2009-2018 The Regents of the University of Michigan.
-----
You are using HOOMD-blue. Please cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]            Tesla K20m  13 SM_3.5 @ 0.706 GHz, 4743 MiB DRAM
Equilibrium_78.py:047  |  system = hoomd.init.read_gsd(ramp_file,frame = -1)
notice(2): Group "all" created containing 1004 particles
Equilibrium_78.py:051  |  rigid = hoomd.md.constrain.rigid();
notice(2): constrain.rigid(): Creating 1000 rigid bodies (adding 8000 particles)
Equilibrium_78.py:063  |  nl = hoomd.md.nlist.tree(r_buff = 0.5, check_period = 1); #-----Implementation of fast neighborhood list.
-----
You are using tree neighbor lists. Please cite the following:
* M P Howard, J A Anderson, A Nikoubashman, S C Glotzer, and A Z
  Panagiotopoulos. "Efficient neighbor list calculation for molecular simulation
  of colloidal systems using graphics processing units", Computer Physics
  Communications 203 (2016) 45--52
-----
Equilibrium_78.py:065  |  lj = hoomd.md.pair.lj(r_cut = 3.5, nlist=nl)
Equilibrium_78.py:066  |  lj.set_params(mode='shift')
Equilibrium_78.py:070  |  lj.pair_coeff.set('NP','NP', epsilon = 1.0, sigma = 5.0);
Equilibrium_78.py:071  |  lj.pair_coeff.set('M' ,'M' , epsilon = 1.0, sigma = 1.0);
Equilibrium_78.py:072  |  lj.pair_coeff.set('A' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_78.py:073  |  lj.pair_coeff.set('M' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_78.py:074  |  lj.pair_coeff.set('NP','M' , epsilon = 1.0, sigma = 3.0);
Equilibrium_78.py:075  |  lj.pair_coeff.set('NP','A' , epsilon = 1.0, sigma = 3.0);
Equilibrium_78.py:079  |  hoomd.md.integrate.mode_standard(dt = 0.005);
Equilibrium_78.py:083  |  nanoparticles = hoomd.group.type(name = 'Nano_Particles', type = 'NP');
notice(2): Group "Nano_Particles" created containing 4 particles
Equilibrium_78.py:084  |  mesogens = hoomd.group.rigid_center();
notice(2): Group "rigid_center" created containing 1000 particles
notice(2): Group "NP_Mes" created containing 1004 particles
Equilibrium_78.py:089  |  npt = hoomd.md.integrate.npt(group = mesogens, kT = temp, tau = 17.0, tauP = 17.0, P = pressure);
Equilibrium_78.py:096  |  log = hoomd.analyze.log(filename = log_file,
                         quantities = ['num_particles',
                                     'ndof',
                                     'translational_ndof',
                                     'rotational_ndof',
                                     'potential_energy',
                                     'kinetic_energy',
                                     'translational_kinetic_energy',
                                     'rotational_kinetic_energy',
                                     'temperature',
                                     'pressure',
                                      'volume'],
                         period = 1e3,
                         overwrite = True);
Equilibrium_78.py:112  |                 group = hoomd.group.all(),
Equilibrium_78.py:110  |  gsd = hoomd.dump.gsd(gsd_file,
               period = 1e3,
               group = hoomd.group.all(),
               overwrite=True); 
Equilibrium_78.py:114  |  meso_gsd = hoomd.dump.gsd(meso_gsd_file,
               period = 1e3,
               group = mesogens,
               overwrite=True); 
Equilibrium_78.py:125  |  hoomd.run(steps)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 0 exclusions             : 9004
notice(2): Neighbors included by diameter          : no
notice(2): Neighbors excluded when in the same body: yes
** starting run **
Time 00:00:10 | Step 880846 / 978000 | TPS 284.54 | ETA 00:05:41
Time 00:00:20 | Step 884006 / 978000 | TPS 315.998 | ETA 00:04:57
Time 00:00:30 | Step 887099 / 978000 | TPS 309.282 | ETA 00:04:53
Time 00:00:40 | Step 891301 / 978000 | TPS 416.44 | ETA 00:03:28
Time 00:00:50 | Step 897901 / 978000 | TPS 640.143 | ETA 00:02:05
Time 00:01:00 | Step 904501 / 978000 | TPS 639.369 | ETA 00:01:54
Time 00:01:11 | Step 911101 / 978000 | TPS 639.486 | ETA 00:01:44
Time 00:01:21 | Step 917701 / 978000 | TPS 640.024 | ETA 00:01:34
Time 00:01:31 | Step 924301 / 978000 | TPS 639.45 | ETA 00:01:23
Time 00:01:42 | Step 930901 / 978000 | TPS 640.006 | ETA 00:01:13
Time 00:01:52 | Step 937501 / 978000 | TPS 639.639 | ETA 00:01:03
Time 00:02:02 | Step 944101 / 978000 | TPS 639.597 | ETA 00:00:53
Time 00:02:13 | Step 950701 / 978000 | TPS 640.118 | ETA 00:00:42
Time 00:02:23 | Step 957301 / 978000 | TPS 639.561 | ETA 00:00:32
Time 00:02:33 | Step 963901 / 978000 | TPS 640.081 | ETA 00:00:22
Time 00:02:44 | Step 970501 / 978000 | TPS 639.607 | ETA 00:00:11
Time 00:02:54 | Step 977101 / 978000 | TPS 639.634 | ETA 00:00:01
Time 00:02:55 | Step 978000 / 978000 | TPS 835.9 | ETA 00:00:00
Average TPS: 570.503
---------
-- Neighborlist stats:
3886 normal updates / 334 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 2 / n_neigh_avg: 0.000666371
shortest rebuild period: 1
** run complete **
[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-smi'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-debugdump'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-persistenced'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-control'
[0m[33mWARNING: Skipping user bind, non existent bind point (file) in container: '/usr/bin/nvidia-cuda-mps-server'
[0mHOOMD-blue 2.3.5 CUDA (8.0) DOUBLE HPMC_MIXED TBB SSE SSE2 
Compiled: 10/08/18
Copyright 2009-2018 The Regents of the University of Michigan.
-----
You are using HOOMD-blue. Please cite the following:
* J A Anderson, C D Lorenz, and A Travesset. "General purpose molecular dynamics
  simulations fully implemented on graphics processing units", Journal of
  Computational Physics 227 (2008) 5342--5359
* J Glaser, T D Nguyen, J A Anderson, P Liu, F Spiga, J A Millan, D C Morse, and
  S C Glotzer. "Strong scaling of general-purpose molecular dynamics simulations
  on GPUs", Computer Physics Communications 192 (2015) 97--107
-----
notice(2): This system is not compute exclusive, using local rank to select GPUs
HOOMD-blue is running on the following GPU(s):
 [0]            Tesla K20m  13 SM_3.5 @ 0.706 GHz, 4743 MiB DRAM
Equilibrium_80.py:047  |  system = hoomd.init.read_gsd(ramp_file,frame = -1)
notice(2): Group "all" created containing 1004 particles
Equilibrium_80.py:051  |  rigid = hoomd.md.constrain.rigid();
notice(2): constrain.rigid(): Creating 1000 rigid bodies (adding 8000 particles)
Equilibrium_80.py:063  |  nl = hoomd.md.nlist.tree(r_buff = 0.5, check_period = 1); #-----Implementation of fast neighborhood list.
-----
You are using tree neighbor lists. Please cite the following:
* M P Howard, J A Anderson, A Nikoubashman, S C Glotzer, and A Z
  Panagiotopoulos. "Efficient neighbor list calculation for molecular simulation
  of colloidal systems using graphics processing units", Computer Physics
  Communications 203 (2016) 45--52
-----
Equilibrium_80.py:065  |  lj = hoomd.md.pair.lj(r_cut = 3.5, nlist=nl)
Equilibrium_80.py:066  |  lj.set_params(mode='shift')
Equilibrium_80.py:070  |  lj.pair_coeff.set('NP','NP', epsilon = 1.0, sigma = 5.0);
Equilibrium_80.py:071  |  lj.pair_coeff.set('M' ,'M' , epsilon = 1.0, sigma = 1.0);
Equilibrium_80.py:072  |  lj.pair_coeff.set('A' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_80.py:073  |  lj.pair_coeff.set('M' ,'A' , epsilon = 1.0, sigma = 1.0);
Equilibrium_80.py:074  |  lj.pair_coeff.set('NP','M' , epsilon = 1.0, sigma = 3.0);
Equilibrium_80.py:075  |  lj.pair_coeff.set('NP','A' , epsilon = 1.0, sigma = 3.0);
Equilibrium_80.py:079  |  hoomd.md.integrate.mode_standard(dt = 0.005);
Equilibrium_80.py:083  |  nanoparticles = hoomd.group.type(name = 'Nano_Particles', type = 'NP');
notice(2): Group "Nano_Particles" created containing 4 particles
Equilibrium_80.py:084  |  mesogens = hoomd.group.rigid_center();
notice(2): Group "rigid_center" created containing 1000 particles
notice(2): Group "NP_Mes" created containing 1004 particles
Equilibrium_80.py:089  |  npt = hoomd.md.integrate.npt(group = mesogens, kT = temp, tau = 17.0, tauP = 17.0, P = pressure);
Equilibrium_80.py:096  |  log = hoomd.analyze.log(filename = log_file,
                         quantities = ['num_particles',
                                     'ndof',
                                     'translational_ndof',
                                     'rotational_ndof',
                                     'potential_energy',
                                     'kinetic_energy',
                                     'translational_kinetic_energy',
                                     'rotational_kinetic_energy',
                                     'temperature',
                                     'pressure',
                                      'volume'],
                         period = 1e3,
                         overwrite = True);
Equilibrium_80.py:112  |                 group = hoomd.group.all(),
Equilibrium_80.py:110  |  gsd = hoomd.dump.gsd(gsd_file,
               period = 1e3,
               group = hoomd.group.all(),
               overwrite=True); 
Equilibrium_80.py:114  |  meso_gsd = hoomd.dump.gsd(meso_gsd_file,
               period = 1e3,
               group = mesogens,
               overwrite=True); 
Equilibrium_80.py:125  |  hoomd.run(steps)
notice(2): -- Neighborlist exclusion statistics -- :
notice(2): Particles with 0 exclusions             : 9004
notice(2): Neighbors included by diameter          : no
notice(2): Neighbors excluded when in the same body: yes
** starting run **
Time 00:00:10 | Step 929891 / 1027000 | TPS 289.092 | ETA 00:05:35
Time 00:00:20 | Step 933883 / 1027000 | TPS 399.195 | ETA 00:03:53
Time 00:00:30 | Step 940201 / 1027000 | TPS 631.328 | ETA 00:02:17
Time 00:00:40 | Step 946801 / 1027000 | TPS 651.351 | ETA 00:02:03
Time 00:00:50 | Step 953401 / 1027000 | TPS 650.892 | ETA 00:01:53
Time 00:01:00 | Step 960001 / 1027000 | TPS 650.815 | ETA 00:01:42
Time 00:01:10 | Step 966601 / 1027000 | TPS 651.467 | ETA 00:01:32
Time 00:01:20 | Step 973201 / 1027000 | TPS 650.727 | ETA 00:01:22
Time 00:01:31 | Step 979801 / 1027000 | TPS 651.533 | ETA 00:01:12
Time 00:01:41 | Step 986401 / 1027000 | TPS 650.893 | ETA 00:01:02
Time 00:01:51 | Step 993001 / 1027000 | TPS 650.88 | ETA 00:00:52
Time 00:02:01 | Step 999601 / 1027000 | TPS 651.492 | ETA 00:00:42
Time 00:02:11 | Step 1006201 / 1027000 | TPS 650.937 | ETA 00:00:31
Time 00:02:21 | Step 1012801 / 1027000 | TPS 651.443 | ETA 00:00:21
Time 00:02:31 | Step 1019401 / 1027000 | TPS 650.951 | ETA 00:00:11
Time 00:02:41 | Step 1026001 / 1027000 | TPS 650.831 | ETA 00:00:01
Time 00:02:43 | Step 1027000 / 1027000 | TPS 702.633 | ETA 00:00:00
Average TPS: 612.715
---------
-- Neighborlist stats:
1838 normal updates / 335 forced updates / 0 dangerous updates
n_neigh_min: 0 / n_neigh_max: 0 / n_neigh_avg: 0
shortest rebuild period: 1
** run complete **
